// Generated by CoffeeScript 1.6.3
(function() {
  var Chatternet,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  console.log("chatternets loaded");

  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

  Chatternet = (function() {
    function Chatternet() {
      this.handlePeerError = __bind(this.handlePeerError, this);
      this.addPeerVideoCall = __bind(this.addPeerVideoCall, this);
      this.handlePeerCalling = __bind(this.handlePeerCalling, this);
      this.handlePeerOpen = __bind(this.handlePeerOpen, this);
      this.callPeer = __bind(this.callPeer, this);
      this.handleStartedLocalStream = __bind(this.handleStartedLocalStream, this);
      this.startLocalStream = __bind(this.startLocalStream, this);
      this.initPeerConnections = __bind(this.initPeerConnections, this);
      this.getInitDataFromServer = __bind(this.getInitDataFromServer, this);
      this.start = __bind(this.start, this);
      this.peer = null;
      this.urlId = null;
      this.rawUrl = document.referrer;
      this.openCalls = [];
    }

    Chatternet.prototype.start = function() {
      return this.getInitDataFromServer();
    };

    Chatternet.prototype.getInitDataFromServer = function() {
      var _this = this;
      console.log("getting init data from server..");
      return $.ajax({
        url: "/new_peer",
        type: "POST",
        data: {
          "full_url": this.rawUrl
        },
        success: function(jsonData) {
          return _this.initPeerConnections(jsonData);
        },
        error: function(jqXHR, textStatus, errorThrown) {
          console.log("ERROR");
          console.log(textStatus);
          return console.log(jqXHR);
        }
      });
    };

    Chatternet.prototype.initPeerConnections = function(jsonData) {
      var data,
        _this = this;
      console.log("Opening connections");
      data = JSON.parse(jsonData);
      console.log(data);
      this.urlId = data.url_id;
      console.log(data.peer_id);
      this.peer = new Peer(data.peer_id, {
        key: 'rrvwvw4tuyxpqfr',
        debug: true
      });
      this.peer.on("open", function() {
        return _this.handlePeerOpen();
      });
      this.peer.on("call", function(call) {
        return _this.handlePeerCalling(call);
      });
      this.peer.on("error", function(err) {
        return _this.handlePeerError(err);
      });
      return this.startLocalStream(data.peers);
    };

    Chatternet.prototype.startLocalStream = function(peerIdsToConnect) {
      var _this = this;
      console.log('starting local stream');
      return navigator.getUserMedia({
        audio: true,
        video: true
      }, function(stream) {
        return _this.handleStartedLocalStream(stream, peerIdsToConnect);
      }, function() {
        console.log("error starting local stream");
        return $('#setup-error').show();
      });
    };

    Chatternet.prototype.handleStartedLocalStream = function(stream, peerIdsToConnect) {
      var peerId, _i, _len, _results;
      $('#my-video').prop('src', URL.createObjectURL(stream));
      window.localStream = stream;
      $('#setup-instructions').hide();
      console.log("loaded local stream");
      _results = [];
      for (_i = 0, _len = peerIdsToConnect.length; _i < _len; _i++) {
        peerId = peerIdsToConnect[_i];
        _results.push(this.callPeer(peerId));
      }
      return _results;
    };

    Chatternet.prototype.callPeer = function(peerId) {
      var call;
      console.log("attempting to call peer " + peerId);
      call = this.peer.call(peerId, window.localStream);
      console.log(call);
      return this.addPeerVideoCall(call);
    };

    Chatternet.prototype.handlePeerOpen = function() {
      console.log("peer opened with id " + this.peer.id);
      console.log(this.peer);
      return $('#my-id').text(this.peer.id);
    };

    Chatternet.prototype.handlePeerCalling = function(call) {
      call.answer(window.localStream);
      return this.addPeerVideoCall(call);
    };

    Chatternet.prototype.addPeerVideoCall = function(call) {
      var videoClass, videoSelector;
      console.log(call.peer);
      console.log("call peer id: " + call.peer.id);
      videoClass = "their-video " + call.peer.id;
      videoSelector = "#video-container .their-video." + call.peer.id;
      $("#video-container").append("<video class='" + videoClass + "' autoplay></video>");
      call.on('stream', function(stream) {
        return $(videoSelector).prop('src', URL.createObjectURL(stream));
      });
      return this.openCalls.push(call);
    };

    Chatternet.prototype.handlePeerError = function(err) {
      console.log("PEER ERROR: ");
      return console.log(err);
    };

    return Chatternet;

  })();

  $(document).ready(function() {
    var chatternet;
    chatternet = new Chatternet();
    return chatternet.start();
  });

}).call(this);
